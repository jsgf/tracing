use crate::{
    filter::LevelFilter,
    layer::{self, Context, Layer},
    registry,
};
use std::{
    any::{type_name, TypeId},
    cell::{Cell, RefCell},
    fmt,
    marker::PhantomData,
    sync::Arc,
    thread_local,
};
use tracing_core::{
    span,
    subscriber::{Interest, Subscriber},
    Event, Metadata,
};

/// A [`Layer`] that wraps an inner [`Layer`] and adds a [`Filter`] which
/// controls what spans and events are enabled for that layer.
#[derive(Clone)]
pub struct Filtered<L, F, S> {
    filter: F,
    layer: L,
    id: MagicPlfDowncastMarker,
    _s: PhantomData<fn(S)>,
}

/// A [`Filter`] implemented by a closure or function pointer.
pub struct FilterFn<
    S,
    // TODO(eliza): should these just be boxed functions?
    F = fn(&Metadata<'_>, &Context<'_, S>) -> bool,
    R = fn(&'static Metadata<'static>) -> Interest,
> {
    enabled: F,
    register_callsite: Option<R>,
    max_level_hint: Option<LevelFilter>,
    cacheable: bool,
    _s: PhantomData<fn(S)>,
}

/// Uniquely identifies an individual [`Filter`] instance in the context of
/// a [`Subscriber`].
///
/// When adding a [`Filtered`] [`Layer`] to a [`Subscriber`], the [`Subscriber`]
/// generates a `FilterId` for that [`Filtered`] layer. The [`Filtered`] layer
/// will then use the generated ID to query whether a particular span was
/// previously enabled by that layer's [`Filter`].
///
/// **Note**: Currently, the [`Registry`] type provided by this crate is the
/// **only** [`Subscriber`] implementation capable of participating in per-layer
/// filtering. Therefore, the `FilterId` type cannot currently be constructed by
/// user code. In the future, new APIs will be added to `tracing-subscriber` to
/// allow user-implemented [`Subscriber`]s to also participate in per-layer
/// filtering. When those APIs are added, user subscribers will be responsible
/// for generating and assigning `FilterId`s.
///
/// [`Subscriber`]: tracing_core::Subscriber
/// [`Layer`]: crate::layer::Layer
/// [`Registry`]: crate::registry::Registry
#[derive(Copy, Clone)]
pub struct FilterId(u64);

/// A bitmap tracking which [`FilterId`]s have implemented a given span or
/// event.
///
/// This is currently a private type that's used exclusively by the
/// [`Registry`]. However, in the future, this may become a public API, in order
/// to allow user subscribers to host [`Filter`]s.
#[derive(Default, Copy, Clone, Eq, PartialEq)]
pub(crate) struct FilterMap {
    bits: u64,
}

/// The current state of `enabled` calls to per-layer filters on this
/// thread.
///
/// When `Filtered::enabled` is called, the filter will set the bit
/// corresponding to its ID if it will disable the event/span being
/// filtered. When the event or span is recorded, the per-layer filter will
/// check its bit to determine if it disabled that event or span, and skip
/// forwarding the event or span to the inner layer if the bit is set. Once
/// a span or event has been skipped by a per-layer filter, it unsets its
/// bit, so that the `FilterMap` has been cleared for the next set of
/// `enabled` calls.
///
/// This is also read by the `Registry`, for two reasons:
///
/// 1. When filtering a span, the registry must store the `FilterMap`
///    generated by `Filtered::enabled` calls for that span as part of the
///    span's per-span data. This allows `Filtered` layers to determine
///    whether they previously disabled a given span, and avoid showing it
///    to the wrapped layer if it was disabled.
///
///    This is the mechanism that allows `Filtered` layers to also filter
///    out the spans they disable from span traversals (such as iterating
///    over parents, etc).
/// 2. If all the bits are set, then every per-layer filter has decided it
///    doesn't want to enable that span or event. In that case, the
///    `Registry`'s `enabled` method will return `false`, so that we can
///    skip recording it entirely.
#[derive(Debug)]
pub(crate) struct FilterState {
    enabled: Cell<FilterMap>,
    // TODO(eliza): `Interest`s should _probably_ be `Copy`. The only reason
    // they're not is our Obsessive Commitment to Forwards-Compatibility. If
    // this changes in tracing-core`, we can make this a `Cell` rather than
    // `RefCell`...
    interest: RefCell<Option<Interest>>,

    #[cfg(debug_assertions)]
    in_current_filter_pass: Cell<usize>,

    #[cfg(debug_assertions)]
    in_current_interest_pass: Cell<usize>,
}

thread_local! {
    pub(crate) static FILTERING: FilterState = FilterState::new();
}

// === impl Filter ===

impl<S> layer::Filter<S> for LevelFilter {
    fn enabled(&self, meta: &Metadata<'_>, _: &Context<'_, S>) -> bool {
        meta.level() <= self
    }

    fn callsite_enabled(&self, meta: &'static Metadata<'static>) -> Interest {
        if meta.level() <= self {
            Interest::always()
        } else {
            Interest::never()
        }
    }

    fn max_level_hint(&self) -> Option<LevelFilter> {
        Some(*self)
    }
}

impl<S> layer::Filter<S> for Arc<dyn layer::Filter<S> + Send + Sync + 'static> {
    #[inline]
    fn enabled(&self, meta: &Metadata<'_>, cx: &Context<'_, S>) -> bool {
        (**self).enabled(meta, cx)
    }

    #[inline]
    fn callsite_enabled(&self, meta: &'static Metadata<'static>) -> Interest {
        (**self).callsite_enabled(meta)
    }

    #[inline]
    fn max_level_hint(&self) -> Option<LevelFilter> {
        (**self).max_level_hint()
    }
}

impl<S> layer::Filter<S> for Box<dyn layer::Filter<S> + Send + Sync + 'static> {
    #[inline]
    fn enabled(&self, meta: &Metadata<'_>, cx: &Context<'_, S>) -> bool {
        (**self).enabled(meta, cx)
    }

    #[inline]
    fn callsite_enabled(&self, meta: &'static Metadata<'static>) -> Interest {
        (**self).callsite_enabled(meta)
    }

    #[inline]
    fn max_level_hint(&self) -> Option<LevelFilter> {
        (**self).max_level_hint()
    }
}

// === impl Filtered ===

impl<L, F, S> Filtered<L, F, S> {
    /// Wraps the provided `layer` so that it is filtered by `filter`.
    pub fn new(layer: L, filter: F) -> Self {
        Self {
            layer,
            filter,
            id: MagicPlfDowncastMarker(FilterId::DISABLED),
            _s: PhantomData,
        }
    }

    #[inline(always)]
    fn id(&self) -> FilterId {
        self.id.0
    }

    fn did_enable(&self, f: impl FnOnce()) {
        FILTERING.with(|filtering| filtering.did_enable(self.id(), f))
    }
}

impl<S, L, F> Layer<S> for Filtered<L, F, S>
where
    S: Subscriber + for<'span> registry::LookupSpan<'span> + 'static,
    F: layer::Filter<S> + 'static,
    L: Layer<S>,
{
    fn on_layer(&mut self, subscriber: &mut S) {
        self.id = MagicPlfDowncastMarker(subscriber.register_filter());
        self.layer.on_layer(subscriber);
    }

    // TODO(eliza): can we figure out a nice way to make the `Filtered` layer
    // not call `is_enabled_for` in hooks that the inner layer doesn't actually
    // have real implementations of? probably not...
    //
    // it would be cool if there was some wild rust reflection way of checking
    // if a trait impl has the default impl of a trait method or not, but that's
    // almsot certainly impossible...right?

    fn register_callsite(&self, metadata: &'static Metadata<'static>) -> Interest {
        let interest = self.filter.callsite_enabled(metadata);

        // If the filter didn't disable the callsite, allow the inner layer to
        // register it --- since `register_callsite` is also used for purposes
        // such as reserving/caching per-callsite data, we want the inner layer
        // to be able to perform any other registration steps. However, we'll
        // ignore its `Interest`.
        if !interest.is_never() {
            self.layer.register_callsite(metadata);
        }

        // Add our `Interest` to the current sum of per-layer filter `Interest`s
        // for this callsite.
        FILTERING.with(|filtering| filtering.add_interest(interest));

        // don't short circuit! if the stack consists entirely of `Layer`s with
        // per-layer filters, the `Registry` will return the actual `Interest`
        // value that's the sum of all the `register_callsite` calls to those
        // per-layer filters. if we returned an actual `never` interest here, a
        // `Layered` layer would short-circuit and not allow any `Filtered`
        // layers below us if _they_ are interested in the callsite.
        Interest::always()
    }

    fn enabled(&self, metadata: &Metadata<'_>, cx: Context<'_, S>) -> bool {
        let cx = cx.with_filter(self.id());
        let enabled = self.filter.enabled(metadata, &cx);
        FILTERING.with(|filtering| filtering.set(self.id(), enabled));
        // don't short circuit, keep filtering
        if enabled {
            self.layer.enabled(metadata, cx)
        } else {
            true
        }
    }

    fn new_span(&self, attrs: &span::Attributes<'_>, id: &span::Id, cx: Context<'_, S>) {
        self.did_enable(|| {
            self.layer.new_span(attrs, id, cx.with_filter(self.id()));
        })
    }

    #[doc(hidden)]
    fn max_level_hint(&self) -> Option<LevelFilter> {
        self.filter.max_level_hint()
    }

    fn on_record(&self, span: &span::Id, values: &span::Record<'_>, cx: Context<'_, S>) {
        if let Some(cx) = cx.if_enabled_for(span, self.id()) {
            self.layer.on_record(span, values, cx)
        }
    }

    fn on_follows_from(&self, span: &span::Id, follows: &span::Id, cx: Context<'_, S>) {
        // only call `on_follows_from` if both spans are enabled by us
        if cx.is_enabled_for(span, self.id()) && cx.is_enabled_for(follows, self.id()) {
            self.layer
                .on_follows_from(span, follows, cx.with_filter(self.id()))
        }
    }

    fn on_event(&self, event: &Event<'_>, cx: Context<'_, S>) {
        self.did_enable(|| {
            self.layer.on_event(event, cx.with_filter(self.id()));
        })
    }

    fn on_enter(&self, id: &span::Id, cx: Context<'_, S>) {
        if let Some(cx) = cx.if_enabled_for(id, self.id()) {
            self.layer.on_enter(id, cx)
        }
    }

    fn on_exit(&self, id: &span::Id, cx: Context<'_, S>) {
        if let Some(cx) = cx.if_enabled_for(id, self.id()) {
            self.layer.on_exit(id, cx)
        }
    }

    fn on_close(&self, id: span::Id, cx: Context<'_, S>) {
        if let Some(cx) = cx.if_enabled_for(&id, self.id()) {
            self.layer.on_close(id, cx)
        }
    }

    // XXX(eliza): the existence of this method still makes me sad...
    fn on_id_change(&self, old: &span::Id, new: &span::Id, cx: Context<'_, S>) {
        if let Some(cx) = cx.if_enabled_for(old, self.id()) {
            self.layer.on_id_change(old, new, cx)
        }
    }

    #[doc(hidden)]
    #[inline]
    unsafe fn downcast_raw(&self, id: TypeId) -> Option<*const ()> {
        match id {
            id if id == TypeId::of::<Self>() => Some(self as *const _ as *const ()),
            id if id == TypeId::of::<L>() => Some(&self.layer as *const _ as *const ()),
            id if id == TypeId::of::<F>() => Some(&self.filter as *const _ as *const ()),
            id if id == TypeId::of::<MagicPlfDowncastMarker>() => {
                Some(&self.id as *const _ as *const ())
            }
            _ => None,
        }
    }
}

impl<F, L, S> fmt::Debug for Filtered<F, L, S>
where
    F: fmt::Debug,
    L: fmt::Debug,
{
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        let alt = f.alternate();
        let mut s = f.debug_struct("Filtered");
        s.field("filter", &self.filter)
            .field("layer", &self.layer)
            .field("id", &self.id);
        if alt {
            s.field(
                "subscriber",
                &format_args!("PhantomData<{}>", type_name::<S>()),
            );
        }
        s.finish()
    }
}

// === impl FilterFn ===

/// Constructs a [`FilterFn`], which implements the [`Filter`] trait, from
/// a function or closure that returns `true` if a span or event should be enabled.
///
/// This is equivalent to calling [`FilterFn::new`].
///
/// # Examples
///
/// ```
/// use tracing_subscriber::{
///     layer::{Layer, SubscriberExt},
///     filter,
///     util::SubscriberInitExt,
/// };
///
/// let my_filter = filter::filter_fn(|metadata, _| {
///     // Only enable spans or events with the target "interesting_target"
///     metadata.target() == "interesting_target"
/// });
///
/// let my_layer = // ...
///    # filter::LevelFilter::INFO;
///
/// tracing_subscriber::registry()
///     // Add the filter to the layer
///     .with(my_layer.with_filter(my_filter))
///     .init();
/// ```
pub fn filter_fn<S, F>(f: F) -> FilterFn<S, F>
where
    F: Fn(&Metadata<'_>, &Context<'_, S>) -> bool,
{
    FilterFn::new(f)
}

impl<S, F> FilterFn<S, F>
where
    F: Fn(&Metadata<'_>, &Context<'_, S>) -> bool,
{
    /// Constructs a [`Filter`] from a function or closure that returns `true`
    /// if a span or event should be enabled.
    ///
    /// # Examples
    ///
    /// ```
    /// use tracing_subscriber::{
    ///     layer::{Layer, SubscriberExt},
    ///     filter::FilterFn,
    ///     util::SubscriberInitExt,
    /// };
    ///
    /// let my_filter = FilterFn::new(|metadata, _| {
    ///     // Only enable spans or events with the target "interesting_target"
    ///     metadata.target() == "interesting_target"
    /// });
    ///
    /// let my_layer = // ...
    ///     # tracing_subscriber::filter::LevelFilter::INFO;
    ///
    /// tracing_subscriber::registry()
    ///     .with(my_layer.with_filter(my_filter))
    ///     .init();
    /// ```
    pub fn new(enabled: F) -> Self {
        Self {
            enabled,
            register_callsite: None,
            max_level_hint: None,
            cacheable: false,
            _s: PhantomData,
        }
    }

    /// Indicates that the result of the [`enabled`] can be cached.
    ///
    /// By default, a `FilterFn` assumes that the supplied [`Filter::enabled`]
    /// function _may_ be dynamic: it may decide whether a given span or event
    /// is enabled based not only on its [`Metadata`], but also based on the
    /// current [span context] in which a particular instance of that event
    /// occurs. Therefore, the default [`Filter::callsite_enabled`]
    /// implementation will always return [`Interest::sometimes`], indicating
    /// that the [`Filter::enabled`] method must be called *every* time a span
    /// or event is recorded at that callsite.
    ///
    /// However, if the value returned by the [`Filter::enabled`] function will
    /// never change for a particular [`Metadata`], regardless of the current
    /// runtime context it's called in, then [`Filter::callsite_enabled`] may
    /// instead return [`Interest::always`] if the callsite is enabled, or
    /// [`Interest::never`] if it is not. This will potentially allow the
    /// filtering result to be cached, which can improve performance, as the
    /// filter may not need to be evaluated multiple times. Calling this method
    /// changes the `FilterFn`'s default behavior to assume that the
    /// [`Filter::enabled`] function *can* be cached in this manner.
    ///
    /// # Examples
    ///
    /// A valid use of `cacheable`, where the [`Filter::enabled`] function will
    /// always return the same value for a given [`Metadata`]:
    ///
    /// ```
    /// use tracing_subscriber::{filter, Layer};
    ///
    /// let target_filter_fn = filter::filter_fn(|metadata, _| {
    ///     metadata.target() == "interesting_target"
    /// })
    ///     // This is VALID: the return value of the function will always
    ///     // be the same for a particular `Metadata`.
    ///     .cacheable();
    ///
    /// let my_layer = // some layer ...
    ///     # filter::LevelFilter::INFO
    ///     .with_filter(target_filter_fn);
    /// # // just so that types are inferred correctly...
    /// # drop(my_layer.with_subscriber(tracing_subscriber::registry()));
    /// ```
    ///
    /// On the other hand, if the function depends on both the [`Metadata`] _and_
    /// the [`Context`], it is *not* cacheable:
    /// ```
    /// use tracing_subscriber::{filter, Layer};
    ///
    /// let span_name_filter_fn = filter::filter_fn(|metadata, context| {
    ///     // If the metadata describes a span, enable it if its name is
    ///     // `interesting_span`.
    ///     if metadata.is_span() && metadata.name() == "interesting_span" {
    ///         return true;
    ///     }
    ///
    ///     // Enable events if and only if we are currently inside a span
    ///     // named `interesting_span`.
    ///     match context.lookup_current() {
    ///         Some(span) => span.name() == "interesting_span",
    ///         None => false,
    ///     }
    /// })
    ///     // This is INVALID: the return value of the function depends on
    ///     // whether or not we are inside a span called `interesting_span`.
    ///     // Therefore, it will NOT always be the same for the same
    ///     // `Metadata`.
    ///     .cacheable();
    ///
    /// let my_layer = // some layer ...
    ///     # filter::LevelFilter::INFO
    ///     .with_filter(span_name_filter_fn);
    /// # // just so that types are inferred correctly...
    /// # drop(my_layer.with_subscriber(tracing_subscriber::registry()));
    /// ```
    ///
    /// # Panics
    ///
    /// If a user-provided `callsite_enabled` function has already been added to
    /// this `FilterFn` (by calling [`with_callsite_filter`]).
    pub fn cacheable(self) -> Self {
        assert!(
            self.register_callsite.is_none(),
            "`FilterFn::cachable` does nothing if a user-provided \
            `callsite_enabled` function has been supplied"
        );
        Self {
            cacheable: true,
            ..self
        }
    }
}

impl<S, F, R> FilterFn<S, F, R>
where
    F: Fn(&Metadata<'_>, &Context<'_, S>) -> bool,
{
    /// Sets the highest verbosity [`Level`] the filter function will enable.
    ///
    /// The value passed to this method will be returned by this `FilterFn`'s
    /// [`Filter::max_level_hint`] method.
    ///
    /// If the provided function will not enable all levels, it is recommended
    /// to call this method to configure it with the most verbose level it will
    /// enable.
    ///
    /// # Examples
    ///
    /// ```
    /// use tracing_subscriber::{
    ///     layer::{Layer, SubscriberExt},
    ///     filter::{filter_fn, LevelFilter},
    ///     util::SubscriberInitExt,
    /// };
    /// use tracing_core::Level;
    ///
    /// let my_filter = filter_fn(|metadata, _| {
    ///     // Only enable spans or events with targets starting with `my_crate`
    ///     // and levels at or below `INFO`.
    ///     metadata.level() <= &Level::INFO && metadata.target().starts_with("my_crate")
    /// })
    ///     // Since the filter closure will only enable the `INFO` level and
    ///     // below, set the max level hint
    ///     .with_max_level_hint(LevelFilter::INFO);
    ///
    /// let my_layer = //
    ///     # LevelFilter::INFO;
    /// tracing_subscriber::registry()
    ///     .with(my_layer.with_filter(my_filter))
    ///     .init();
    /// ```
    ///
    /// [`Level`]: tracing_core::Level
    pub fn with_max_level_hint(self, max_level_hint: impl Into<LevelFilter>) -> Self {
        Self {
            max_level_hint: Some(max_level_hint.into()),
            ..self
        }
    }

    /// Adds a function for filtering callsites to this filter.
    ///
    /// When this filter's [`Filter::callsite_enabled`] method is called,
    /// the provided function will be used rather than the default.
    ///
    /// # Panics
    ///
    /// If this `FilterFn`'s [`enabled`] method has been previously marked as
    /// [`cachable`].
    pub fn with_callsite_filter<R2>(self, callsite_enabled: R2) -> FilterFn<S, F, R2>
    where
        R2: Fn(&'static Metadata<'static>) -> Interest,
    {
        assert!(
            !self.cacheable,
            "`FilterFn::with_callsite_filter` will override the default `callsite_enabled` \
            behavior set by calling `FilterFn::cacheable",
        );
        let register_callsite = Some(callsite_enabled);
        let FilterFn {
            enabled,
            max_level_hint,
            _s,
            ..
        } = self;
        FilterFn {
            enabled,
            register_callsite,
            max_level_hint,
            cacheable: false,
            _s,
        }
    }

    fn is_below_max_level(&self, metadata: &Metadata<'_>) -> bool {
        self.max_level_hint
            .as_ref()
            .map(|hint| metadata.level() <= hint)
            .unwrap_or(true)
    }

    fn default_callsite_enabled(&self, metadata: &Metadata<'_>) -> Interest {
        // If the user indicated that the `enabled` function's result is
        // cacheable, just return that.
        if self.cacheable {
            return match (self.enabled)(metadata, &Context::none()) {
                true => Interest::always(),
                false => Interest::never(),
            };
        }

        // If it's below the configured max level, assume that `enabled` will
        // never enable it...
        if !self.is_below_max_level(metadata) {
            debug_assert!(
                !(self.enabled)(metadata, &Context::none()),
                "FilterFn<{}> claimed it would only enable {:?} and below, \
                but it enabled metadata with the {:?} level\nmetadata={:#?}",
                type_name::<F>(),
                self.max_level_hint.unwrap(),
                metadata.level(),
                metadata,
            );
            return Interest::never();
        }

        // Otherwise, we can't really guarantee if the `enabled` is dynamic or
        // not, so don't assume it will always enable this callsite, and just
        // ask it dynamically.
        // TODO(eliza): is it better to assume this or not??
        Interest::sometimes()
    }
}

impl<S, F, R> layer::Filter<S> for FilterFn<S, F, R>
where
    F: Fn(&Metadata<'_>, &Context<'_, S>) -> bool,
    R: Fn(&'static Metadata<'static>) -> Interest,
{
    fn enabled(&self, metadata: &Metadata<'_>, cx: &Context<'_, S>) -> bool {
        let enabled = (self.enabled)(metadata, cx);
        debug_assert!(
            !enabled || self.is_below_max_level(metadata),
            "FilterFn<{}> claimed it would only enable {:?} and below, \
            but it enabled metadata with the {:?} level\nmetadata={:#?}",
            type_name::<F>(),
            self.max_level_hint.unwrap(),
            metadata.level(),
            metadata,
        );

        enabled
    }

    fn callsite_enabled(&self, metadata: &'static Metadata<'static>) -> Interest {
        let interest = self
            .register_callsite
            .as_ref()
            .map(|callsite_enabled| callsite_enabled(metadata))
            .unwrap_or_else(|| self.default_callsite_enabled(metadata));
        debug_assert!(
            interest.is_never() || self.is_below_max_level(metadata),
            "FilterFn<{}, {}> claimed it was only interested in {:?} and below, \
            but it enabled metadata with the {:?} level\nmetadata={:#?}",
            type_name::<F>(),
            type_name::<R>(),
            self.max_level_hint.unwrap(),
            metadata.level(),
            metadata,
        );

        interest
    }

    fn max_level_hint(&self) -> Option<LevelFilter> {
        self.max_level_hint
    }
}

impl<S, F, R> fmt::Debug for FilterFn<S, F, R> {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        let alt = f.alternate();
        let mut s = f.debug_struct("FilterFn");
        s.field("enabled", &format_args!("{}", type_name::<F>()));
        if self.register_callsite.is_some() {
            s.field(
                "register_callsite",
                &format_args!("Some({})", type_name::<R>()),
            );
        } else {
            s.field("register_callsite", &format_args!("None"));
        }

        s.field("max_level_hint", &self.max_level_hint);
        if alt {
            s.field(
                "subscriber",
                &format_args!("PhantomData<{}>", type_name::<S>()),
            );
        }
        s.finish()
    }
}

impl<S, F, R> Clone for FilterFn<S, F, R>
where
    F: Clone,
    R: Clone,
{
    fn clone(&self) -> Self {
        Self {
            enabled: self.enabled.clone(),
            register_callsite: self.register_callsite.clone(),
            max_level_hint: self.max_level_hint,
            cacheable: self.cacheable,
            _s: PhantomData,
        }
    }
}

impl<F, S> From<F> for FilterFn<S, F>
where
    F: Fn(&Metadata<'_>, &Context<'_, S>) -> bool,
{
    fn from(f: F) -> Self {
        Self::new(f)
    }
}

// === impl FilterId ===

impl FilterId {
    const DISABLED: FilterId = FilterId(u64::MAX);

    pub(crate) fn new(id: u8) -> Self {
        assert!(id < 64, "filter IDs may not be greater than 64");
        Self(1 << id as usize)
    }

    pub(crate) fn and(self, FilterId(other): Self) -> Self {
        if self.0 == Self::DISABLED.0 {
            return Self(other);
        }

        Self(self.0 | other)
    }
}

impl fmt::Debug for FilterId {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        // don't print a giant set of the numbers 0..63 if the filter ID is disabled.
        if self.0 == Self::DISABLED.0 {
            return f
                .debug_tuple("FilterId")
                .field(&format_args!("DISABLED"))
                .finish();
        }

        if f.alternate() {
            f.debug_struct("FilterId")
                .field("ids", &format_args!("{:?}", FmtBitset(self.0)))
                .field("bits", &format_args!("{:b}", self.0))
                .finish()
        } else {
            f.debug_tuple("FilterId").field(&FmtBitset(self.0)).finish()
        }
    }
}

impl fmt::Binary for FilterId {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.debug_tuple("FilterId")
            .field(&format_args!("{:b}", self.0))
            .finish()
    }
}

// === impl FilterMap ===

impl FilterMap {
    pub(crate) fn set(self, FilterId(mask): FilterId, enabled: bool) -> Self {
        if mask == u64::MAX {
            return self;
        }

        if enabled {
            Self {
                bits: self.bits & (!mask),
            }
        } else {
            Self {
                bits: self.bits | mask,
            }
        }
    }

    #[inline]
    pub(crate) fn is_enabled(self, FilterId(mask): FilterId) -> bool {
        self.bits & mask == 0
    }

    #[inline]
    pub(crate) fn any_enabled(self) -> bool {
        self.bits != u64::MAX
    }
}

impl fmt::Debug for FilterMap {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        let alt = f.alternate();
        let mut s = f.debug_struct("FilterMap");
        s.field("disabled_by", &format_args!("{:?}", &FmtBitset(self.bits)));

        if alt {
            s.field("bits", &format_args!("{:b}", self.bits));
        }

        s.finish()
    }
}

impl fmt::Binary for FilterMap {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.debug_struct("FilterMap")
            .field("bits", &format_args!("{:b}", self.bits))
            .finish()
    }
}

// === impl FilterState ===

impl FilterState {
    fn new() -> Self {
        Self {
            enabled: Cell::new(FilterMap::default()),
            interest: RefCell::new(None),

            #[cfg(debug_assertions)]
            in_current_filter_pass: Cell::new(0),

            #[cfg(debug_assertions)]
            in_current_interest_pass: Cell::new(0),
        }
    }

    // pub(crate) fn set_interest(&self, interest: &Interest) {
    //     let mut current = self.interest.borrow_mut().unwrap();
    // }

    fn set(&self, filter: FilterId, enabled: bool) {
        #[cfg(debug_assertions)]
        {
            let in_current_pass = self.in_current_filter_pass.get();
            if in_current_pass == 0 {
                debug_assert_eq!(self.enabled.get(), FilterMap::default());
            }
            self.in_current_filter_pass.set(in_current_pass + 1);
            debug_assert_eq!(
                self.in_current_interest_pass.get(),
                0,
                "if we are in or starting a filter pass, we must not be in an interest pass."
            )
        }

        self.enabled.set(self.enabled.get().set(filter, enabled))
    }

    fn add_interest(&self, interest: Interest) {
        let mut curr_interest = self.interest.borrow_mut();

        #[cfg(debug_assertions)]
        {
            let in_current_pass = self.in_current_interest_pass.get();
            if in_current_pass == 0 {
                debug_assert!(curr_interest.is_none());
            }
            self.in_current_interest_pass.set(in_current_pass + 1);
        }

        if let Some(curr_interest) = curr_interest.as_mut() {
            if (curr_interest.is_always() && !interest.is_always())
                || (curr_interest.is_never() && !interest.is_never())
            {
                *curr_interest = Interest::sometimes();
            }
            // If the two interests are the same, do nothing. If the current
            // interest is `sometimes`, stay sometimes.
        } else {
            *curr_interest = Some(interest);
        }
    }

    pub(crate) fn event_enabled() -> bool {
        FILTERING
            .try_with(|this| {
                let enabled = this.enabled.get().any_enabled();
                #[cfg(debug_assertions)]
                {
                    if this.in_current_filter_pass.get() == 0 {
                        debug_assert_eq!(this.enabled.get(), FilterMap::default());
                    }

                    // Nothing enabled this event, we won't tick back down the
                    // counter in `did_enable`. Reset it.
                    if !enabled {
                        this.in_current_filter_pass.set(0);
                    }
                }
                enabled
            })
            .unwrap_or(true)
    }

    pub(crate) fn did_enable(&self, filter: FilterId, f: impl FnOnce()) {
        let map = self.enabled.get();
        if map.is_enabled(filter) {
            f();
        } else {
            self.enabled.set(map.set(filter, true));
        }
        #[cfg(debug_assertions)]
        {
            let in_current_pass = self.in_current_filter_pass.get();
            if in_current_pass <= 1 {
                debug_assert_eq!(self.enabled.get(), FilterMap::default());
            }
            self.in_current_filter_pass
                .set(in_current_pass.saturating_sub(1));
            debug_assert_eq!(
                self.in_current_interest_pass.get(),
                0,
                "if we are in a filter pass, we must not be in an interest pass."
            )
        }
    }

    pub(crate) fn take_interest() -> Option<Interest> {
        FILTERING
            .try_with(|filtering| {
                #[cfg(debug_assertions)]
                {
                    if filtering.in_current_interest_pass.get() == 0 {
                        debug_assert!(filtering.interest.try_borrow().ok()?.is_none());
                    }
                    filtering.in_current_interest_pass.set(0);
                }
                filtering.interest.try_borrow_mut().ok()?.take()
            })
            .ok()?
    }

    pub(crate) fn filter_map(&self) -> FilterMap {
        let map = self.enabled.get();
        #[cfg(debug_assertions)]
        if self.in_current_filter_pass.get() == 0 {
            debug_assert_eq!(map, FilterMap::default());
        }

        // if map.all_disabled() {
        //     // Nothing enabled this callsite, we won't tick back down the
        //     // counter in `did_enable`. Reset it.
        //     #[cfg(debug_assertions)]
        //     self.in_current_filter_pass.set(0);
        //     self.enabled.set(FilterMap::default());
        // }
        map
    }
}

pub(crate) fn subscriber_has_plf<S>(subscriber: &S) -> bool
where
    S: Subscriber,
{
    (subscriber as &dyn Subscriber).is::<MagicPlfDowncastMarker>()
}

pub(crate) fn layer_has_plf<L, S>(layer: &L) -> bool
where
    L: Layer<S>,
    S: Subscriber,
{
    unsafe { layer.downcast_raw(TypeId::of::<MagicPlfDowncastMarker>()) }.is_some()
}

#[derive(Clone, Copy)]
#[repr(transparent)]
struct MagicPlfDowncastMarker(FilterId);

impl fmt::Debug for MagicPlfDowncastMarker {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        fmt::Debug::fmt(&self.0, f)
    }
}

struct FmtBitset(u64);

impl fmt::Debug for FmtBitset {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        let mut set = f.debug_set();
        for bit in 0..64 {
            // if the `bit`-th bit is set, add it to the debug set
            if self.0 & (1 << bit) != 0 {
                set.entry(&bit);
            }
        }
        set.finish()
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::{layer::tests::*, prelude::*};
    use tracing::Subscriber;

    #[cfg(feature = "registry")]
    mod max_level_hints {
        use super::*;

        #[test]
        fn mixed_with_unfiltered() {
            let subscriber = crate::registry()
                .with(NopLayer)
                .with(NopLayer.with_filter(LevelFilter::INFO));
            assert_eq!(subscriber.max_level_hint(), None);
        }

        #[test]
        fn mixed_with_unfiltered_layered() {
            let subscriber = crate::registry().with(NopLayer).with(
                NopLayer
                    .with_filter(LevelFilter::INFO)
                    .and_then(NopLayer.with_filter(LevelFilter::TRACE)),
            );
            assert_eq!(subscriber.max_level_hint(), None);
        }

        #[test]
        fn mixed_interleaved() {
            let subscriber = crate::registry()
                .with(NopLayer)
                .with(NopLayer.with_filter(LevelFilter::INFO))
                .with(NopLayer)
                .with(NopLayer.with_filter(LevelFilter::INFO));
            assert_eq!(subscriber.max_level_hint(), None);
        }

        #[test]
        fn mixed_layered() {
            let subscriber = crate::registry()
                .with(NopLayer.with_filter(LevelFilter::INFO).and_then(NopLayer))
                .with(NopLayer.and_then(NopLayer.with_filter(LevelFilter::INFO)));
            assert_eq!(subscriber.max_level_hint(), None);
        }

        #[test]
        fn plf_only_unhinted() {
            let subscriber = crate::registry()
                .with(NopLayer.with_filter(LevelFilter::INFO))
                .with(NopLayer.with_filter(filter_fn(|_, _| true)));
            assert_eq!(subscriber.max_level_hint(), None);
        }

        #[test]
        fn plf_only_picks_max() {
            let subscriber = crate::registry()
                .with(NopLayer.with_filter(LevelFilter::WARN))
                .with(NopLayer.with_filter(LevelFilter::DEBUG));
            assert_eq!(subscriber.max_level_hint(), Some(LevelFilter::DEBUG));
        }

        #[test]
        fn many_plf_only_picks_max() {
            let subscriber = crate::registry()
                .with(NopLayer.with_filter(LevelFilter::WARN))
                .with(NopLayer.with_filter(LevelFilter::DEBUG))
                .with(NopLayer.with_filter(LevelFilter::INFO))
                .with(NopLayer.with_filter(LevelFilter::ERROR));
            assert_eq!(subscriber.max_level_hint(), Some(LevelFilter::DEBUG));
        }
    }
}
